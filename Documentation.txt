The code which is provided to make things easier is as follows

#Board class

Board() - constructor, creates an empty board, shouldn't be needed

printBoard() - displays a color coded version of the board showing the connected squares in the same color, and the 
            values of the squares, with 0 if there isn't a given values

printSums() - prints the region sums for all the squares on the board, is useful alongside printBoard() to see the sum of each
            color coded region
 
**class variables**

squares - arrayList<Square> containing all 81 of the boards square objects each having its own data



#Square class 

Square(int x, int y) - constructor, creates a new square with coords x,y 

Square(int x, int y, int value, int regionSum) - constructor, creates a new square with coords x,y and a value and regionSum.
            If value is unknown -1 should be used

print() - prints relevant information about square object that calls it

addConnection() - shouldn't be needed, adds a new Square to an existing network of Squares, is only used in loading saved files

setSum() - shouldn't be needed, defines a sum value for a network of Squares, is only used while loading values

setValue() - set the squares value

**class variables**

int x - x value

int y - y value

int value - the squares value, when all values are found correctly, board is solved

int regionSum - the Sum of the connected Square values, for example, if three Squares are connected and the sum is 9, and the 
            first two have values of 2 and 4, then the third square must have value of 3 because 3+4+2 = 9. Another example is 
            if you have a region with sum of 4, then you know that one of the squares must have a value of 3, and the other must have
            a value of 1 (1+3 = 4) but you can't tell which one is which, so more information is needed